name: CI Portofolio Fiqi
on:
  push:
    branches: [master]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          BUILD_ID="${BRANCH}-${REVISION}-${TS}"
          LATEST_ID=canary
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_ID=${GITHUB_REF/refs\/tags\//}
            LATEST_ID=latest
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=BUILD_ID::${BUILD_ID} 
          echo ::set-output name=LATEST_ID::${LATEST_ID}

      - name: set var name
        run: |
          echo "buildid=${{ steps.prep.outputs.BUILD_ID }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.1

      - name: Build and Deploy to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            fiqifalah17/portofolio:${{ steps.prep.outputs.BUILD_ID }}
          build-args: |
            BUILD_DATE=${{ steps.prep.outputs.BUILD_DATE }}
            BUILD_ID=${{ steps.prep.outputs.BUILD_ID }}
            LATEST_ID=${{ steps.prep.outputs.LATEST_ID }}
          file: ./Dockerfile
    outputs:
      buildID: ${{ steps.prep.outputs.BUILD_ID }}

  deploy:
    runs-on: ubuntu-latest

    needs: build
    steps:
      - name: Deploy to ssh server
        id: auth
        uses: appleboy/ssh-action@master
        with:
          host: 128.199.71.15
          username: root
          key: ${{ secrets.SSH_PASSWORD }}
          script: |
            /root/docker/setup.sh ${{ needs.build.outputs.buildID }} # Pass the version as a parameter
        # Set up script setup.sh here
        # cd /var/docker/${{ env.branch }}
        # docker pull geniwhitelabel/backend-service:${{ env.branch }}
        # docker compose down
        # docker compose up -d
